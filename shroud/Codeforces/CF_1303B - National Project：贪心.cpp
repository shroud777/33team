//题意：现在要修一条长度为 n 的路，现在该地区的天气为连续 g 天好天气，b 天换天气，再接着 g 天好天气，b 天换天气，以此类推。
//现在一天可以修长度为 1 的路，并且只有好天气修出来的都是高质量，现在要求高质量的路至少一半以上，那么问现在最少多少天可以修成一天路呢？

//思路：首先我们把目标问题分解为两个具体要求：1.修筑的路长度为 n。2.修筑的路中好天气修筑的路必须达到一半以上
//那么我们如何满足第二个要求呢？首先如果 g>=b，那么一条修筑长度为 n 的路上一定有大于等于一半路长是高质量的
//那么对于其他情况，我们需要修的路取决于好天气的数量，设我们需要的好天气路长为 x=(n-1)/2+1，那么我们总共需要 x/g*(g+b) 天
//这里我们是把好天气和坏天气绑定在一起看的，这种情况下如果 x%g==0，那么显然这个周期多了一个 b，我们需要减掉，否则的话我们还需要补上 x%g 的天数

#include <bits/stdc++.h>
 
using namespace std;
 
typedef long long ll;
 
const int maxn=5e5+10;
 
ll n,g,b;
 
int main(){
    int t,T=0;
    cin>>t;
    while(t--){
        cin>>n>>g>>b;        
        if(g>=b) cout<<n<<endl;
        else{
            ll temp=n;
            n=(n-1)/2+1;
            ll res=0;
            res+=1ll*(n/g)*(g+b);
            if(n%g==0) res-=b;
            else res+=n%g;
            cout<<max(res,temp)<<endl;
        }
    }    
    return 0;
}
